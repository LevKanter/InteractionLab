/* quiz css */

body {
	margin: 0px;
	padding: 0px;
	font-family: Georgia, serif;
	
	background-image: url("images/pattern.gif");
	
	/*
	background-repeat is usually set to "repeat" by default,
	but let's be explicit about it here anyway.
	*/
	background-repeat: repeat;
	
	/*
	background-attachment is not necessary, but setting it
	to "fixed" achieves a nice effect for the tiled background-image
	when scrolling the page.
	see: http://reference.sitepoint.com/css/background-attachment
	*/
	background-attachment: fixed;
}

h1 {
	margin: 0px;
	padding: 0px;
	font-size: 14px;
	font-weight: normal;
	text-transform: uppercase;
	/*
	Notice that the units here is something called "em"
	(rather than "px"). Em's (NOT to be confused with the <em> tag) 
	represent the current font-size of the element.
	So ".1em" defines the measurement as 1/10th of the font-size.
	This allows us to keep the letter-spacing of the element
	porportionate to its font size.
	*/
	letter-spacing: .1em;
}

h2 {
	margin: 0px;
	padding: .6em 0px;
	font-size: 36px;
	font-style: italic;
	font-weight: normal;
}

h3 {
	margin: 0px;
	padding: 0px 0px 20px;
	font-size: 18px;
	font-weight: normal;
}

p {
	margin: 0px;
	padding: 1em 0px 0px;
	font-size: 16px;
}
/*
Using a :first-child pseudo-class
to zero out the top padding for all <p>
elements that are the first "child"
of their parent (this was not necessary
for the quiz at all, but in general
it's an extremely useful technique).
see: http://css-tricks.com/snippets/css/remove-margins-first-element/
*/
p:first-child {
	padding-top: 0px;
}

a {
	color: #ff0000;
	text-decoration: none;
}

strong {
	text-transform: uppercase;
	/*
	"inherit" means this property is whatever it already
	happens to be in the element's parent element.
	Not all CSS properties can be inherited, but most
	typography-related things can be.
	*/
	font-style: inherit;
	font-weight: inherit;
	letter-spacing: .1em;
}

em {
	/*
	For <em>s, font-style is usually set to "italic" by default,
	but let's be explicit about it here anyway.
	*/
	font-style: italic;
}

header {
	text-align: center;
}

.page {
	/*
	The .page container is relatively positioned
	so that we can put the "sticker" inside of it
	and have the sticker's offset be with respect
	to the .page, rather than the entire window.
	*/
	position: relative;
	
	width: 645px;
	margin: 10px auto 30px;
	padding: 30px;
	background-color: #ffffff;
	border: 3px double #000000;
}

.main {
	float: left;
	width: 390px;
}

.main p {
	/*
	A line-height of "1.5" sets the line height
	(AKA the leading) to 1.5 multiplied by the
	element's font-size. This allows us to keep
	the line height proportional to the font size.
	*/
	line-height: 1.5;
}

.side {
	float: right;
	width: 205px;
}

.side p {
	padding-right: 10px;
	font-size: 11px;
	font-style: italic;
}

.side p cite {
	font-style: normal;
}

.sticker {
	position: absolute;
	/*
	We have this element inside of the .page,
	and .page is relatively positioned (i.e. 
	.page { position: relativel }). Subsequently,
	this sticker element's offsets (top, right in this case)
	are with respect to .page
	*/
	top: 10px;
	right: -77px;
	
	width: 200px;
	height: 200px;
	background-image: url("images/sticker.png");
	
	font-style: italic;
	color: #ffffff;
	text-align: center;
	font-size: 24px;
}

.sticker > span {
	/*
	<span>s are "display: inline;" by default
	we make it "block" so that we can give it
	margins, padding, width, etc
	*/
	display: block;
	margin: 58px 30px 0px;
}

/*
BONUS! Uncomment these styles and then hover
over the sticker! It will blow your mind.
*/
/*
.sticker {
	-moz-transition: -moz-transform .1s ease-in;
	-webkit-transition: -webkit-transform .1s ease-in;
}
.sticker:hover {
	-moz-transform: rotate(30deg);
	-webkit-transform: rotate(30deg);
}
*/

/* 
This is a more advanced, juiced-up "clearfix" than the versionn
I gave you in class, but it uses the same concept and has the
same overall effect.

If you're curious, this particular "clearfix" technique
is from Nicholas Gallagher. He discusses it here: 
http://nicolasgallagher.com/micro-clearfix-hack 
*/

.clearfix:before,
.clearfix:after { 
	content: ""; 
	display: table; 
}
.clearfix:after { 
	clear: both; 
}
.clearfix { 
	zoom: 1; 
}